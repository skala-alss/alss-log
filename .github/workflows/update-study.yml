name: Update Study Dashboards

on:
  schedule:
    - cron: "0 18 * * *" # 매일 03:00 KST (UTC+9)
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode (full: build+render, render-only: SVG만 갱신)"
        type: choice
        required: true
        default: full
        options:
          - full
          - render-only

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-study
  cancel-in-progress: true

jobs:
  # =========================
  # 1) BUILD (JSON 생성/커밋)
  # - full 모드 및 스케줄에서만 수행
  # =========================
  build:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.mode != 'render-only' }}
    runs-on: ubuntu-latest

    steps:
      # 1) PAT로 체크아웃 + 전체 히스토리 전제
      - name: Checkout with BOT PAT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_PAT }}

      # 2) 리모트/브랜치/태그 전부 확보 (+ PR refs)
      - name: Fetch all branches & tags
        run: |
          git config --global advice.detachedHead false
          git remote set-url origin https://x-access-token:${{ secrets.BOT_PAT }}@github.com/${{ github.repository }}.git
          git fetch --prune --tags
          git fetch origin '+refs/heads/*:refs/remotes/origin/*' --prune
          git fetch origin '+refs/pull/*/head:refs/remotes/pull/*/head' --prune
          git fetch origin '+refs/pull/*/merge:refs/remotes/pull/*/merge' --prune
          echo '--- remote branches (head 100) ---'
          git for-each-ref --format='%(refname:short)' refs/remotes/ | sed -n '1,100p' || true
          echo '--- recent main log (head 30) ---'
          (git log origin/main --oneline --decorate -n 30 || git log main --oneline --decorate -n 30) || true

      # 🔴 최신 main으로 동기화 (변경 생성 전에!)
      - name: Sync to latest main (pre-build)
        run: |
          git fetch origin main
          git checkout -B main origin/main

      # 3) Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests PyYAML

      # 4) README → 폴더/.gitkeep 생성 + weeks.yaml 병합/갱신
      - name: Generate folders & weeks.yaml from READMEs
        run: |
          python scripts/gen_folders_and_weeks.py \
            --scan-all \
            --problems-root problems \
            --weeks-yaml config/weeks.yaml \
            -v

      # 5) 대시보드 빌드 (weeks.yaml 기준) → data/dashboard.json 생성
      - name: Build dashboards (emit JSON)
        env:
          ALSS_CHECK_BRANCHES: "1"
          ALSS_OVERWRITE: "1"
          ALSS_DEBUG: "1"
          ALSS_TREND_FALLBACK_DURING: "0"
          ALSS_LOG_LIMIT: "0"
        run: |
          python scripts/build_dashboard.py
          test -f data/dashboard.json || (echo "data/dashboard.json not created" && exit 1)

      # 5.0.1) data 디렉터리 상주시킬 .gitkeep 준비
      - name: Ensure data/.gitkeep exists
        run: |
          mkdir -p data
          [ -f data/.gitkeep ] || touch data/.gitkeep

      # 5.1) 집계 결과 JSON artifact 업로드
      - name: Upload dashboard JSON (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-json
          path: data/dashboard.json

      # 5.5) 커밋 전 디프/상태 확인 (그대로 유지 OK)
      - name: Show diff before commit
        run: |
          echo "=== git status (short) ==="
          git status -s || true
          echo
          echo "=== changed files (name-only) ==="
          git --no-pager diff --name-only || true
          echo
          echo "=== README diffs (first 200 lines) ==="
          for f in $(git --no-pager diff --name-only | grep -E '/?README\.md$' || true); do
            echo "--- $f ---"
            git --no-pager diff -- "$f" | sed -n '1,200p' || true
            echo
          done
          echo "=== weeks.yaml diff (first 200 lines) ==="
          if git --no-pager diff --name-only | grep -q '^config/weeks\.yaml$'; then
            git --no-pager diff -- config/weeks.yaml | sed -n '1,200p' || true
          else
            echo "(no changes in config/weeks.yaml)"
          fi

      # 6) README/주차README + weeks.yaml + .gitkeep + 🔵 dashboard.json 커밋/푸시
      - name: Commit & Push changes (rebase & retry)
        run: |
          # JSON이 .gitignore에 걸려도 강제로 트래킹
          git add -f data/dashboard.json data/.gitkeep

          # 나머지 변경 파일 스테이징
          git add -- README.md ':(glob)**/README.md' config/weeks.yaml ':(glob)**/.gitkeep' || true
          git add -u -- README.md ':(glob)**/README.md' config/weeks.yaml ':(glob)**/.gitkeep' || true

          echo "=== staged files (name-only) ==="
          git --no-pager diff --cached --name-only || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git config user.name  "skala-bot"
          git config user.email "skalabot16@gmail.com"
          git commit -m "🧰 build: sync weeks.yaml, create folders/.gitkeep, refresh dashboards, and commit data/dashboard.json"

          # non-FF 방지: 원격 main에 재배치 후 푸시 (최대 3회 재시도)
          for attempt in 1 2 3; do
            git fetch origin main
            if git pull --rebase origin main && git push origin HEAD:main; then
              echo "Pushed on attempt $attempt"
              exit 0
            fi
            echo "Push failed (attempt $attempt). Retrying..."
            git rebase --abort || true
            sleep $((attempt*2))
          done

          echo "Failed to push after retries."
          exit 1

      # 실패 시 추가 디버그
      - name: Debug on failure
        if: failure()
        run: |
          echo '--- show remotes ---'
          git remote -v
          echo '--- show refs snapshot ---'
          git for-each-ref --format='%(refname:short)' | sed -n '1,200p' || true

  # =========================
  # 2) RENDER (full 모드)
  # - build 산출물 artifact 사용
  # - build 성공 시에만 실행
  # =========================
  render:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.mode != 'render-only' }}
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout with BOT PAT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_PAT }}

      # 🔴 렌더 전에 최신 main으로 동기화
      - name: Sync to latest main
        run: |
          git fetch origin main
          git checkout -B main origin/main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download dashboard JSON (artifact from build)
        uses: actions/download-artifact@v4
        with:
          name: dashboard-json
          path: data

      - name: Render animated SVGs
        run: |
          python scripts/render_svg.py data/dashboard.json assets/

      - name: Commit & Push SVGs (rebase & retry)
        run: |
          git add assets/*.svg || true
          if git diff --cached --quiet; then
            echo "No SVG changes to commit."
            exit 0
          fi

          git config user.name  "skala-bot"
          git config user.email "skalabot16@gmail.com"
          git commit -m "🎨 build(svg): update animated study dashboards"

          for attempt in 1 2 3; do
            git fetch origin main
            if git pull --rebase origin main && git push origin HEAD:main; then
              echo "Pushed on attempt $attempt"
              exit 0
            fi
            echo "Push failed (attempt $attempt). Retrying..."
            git rebase --abort || true
            sleep $((attempt*2))
          done

          echo "Failed to push after retries."
          exit 1

  # =========================
  # 3) RENDER-ONLY (bypass)
  # - 수동 실행(workflow_dispatch) + inputs.mode == render-only
  # - repo 커밋된 data/dashboard.json 사용
  # =========================
  render_only:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.mode == 'render-only' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout with BOT PAT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_PAT }}

      - name: Sync to latest main
        run: |
          git fetch origin main
          git checkout -B main origin/main

      - name: Ensure JSON exists
        run: |
          test -f data/dashboard.json || (echo "::error::data/dashboard.json not found on main. Run full pipeline first." && exit 1)

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Render animated SVGs (render-only mode)
        run: |
          python scripts/render_svg.py data/dashboard.json assets/

      - name: Commit & Push SVGs (rebase & retry)
        run: |
          git add assets/*.svg || true
          if git diff --cached --quiet; then
            echo "No SVG changes to commit."
            exit 0
          fi

          git config user.name  "skala-bot"
          git config user.email "skalabot16@gmail.com"
          git commit -m "🎨 build(svg): render-only update from committed dashboard.json"

          for attempt in 1 2 3; do
            git fetch origin main
            if git pull --rebase origin main && git push origin HEAD:main; then
              echo "Pushed on attempt $attempt"
              exit 0
            fi
            echo "Push failed (attempt $attempt). Retrying..."
            git rebase --abort || true
            sleep $((attempt*2))
          done

          echo "Failed to push after retries."
          exit 1
