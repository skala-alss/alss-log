name: Update Study Dashboards

on:
  schedule:
    - cron: "0 18 * * *" # 매일 03:00 KST (UTC+9)
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-study
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) PAT로 체크아웃 + 전체 히스토리 전제
      - name: Checkout with BOT PAT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_PAT }}

      # 2) 리모트/브랜치/태그 전부 확보 (+ PR refs)
      - name: Fetch all branches & tags
        run: |
          git config --global advice.detachedHead false
          git remote set-url origin https://x-access-token:${{ secrets.BOT_PAT }}@github.com/${{ github.repository }}.git

          git fetch --prune --tags
          git fetch origin '+refs/heads/*:refs/remotes/origin/*' --prune
          git fetch origin '+refs/pull/*/head:refs/remotes/pull/*/head' --prune
          git fetch origin '+refs/pull/*/merge:refs/remotes/pull/*/merge' --prune

          echo '--- remote branches (head 100) ---'
          git for-each-ref --format='%(refname:short)' refs/remotes/ | sed -n '1,100p' || true
          echo '--- recent main log (head 30) ---'
          (git log origin/main --oneline --decorate -n 30 || git log main --oneline --decorate -n 30) || true

      # 3) Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests PyYAML

      # 4) README → 폴더/.gitkeep 생성 + weeks.yaml 병합/갱신
      - name: Generate folders & weeks.yaml from READMEs
        run: |
          python scripts/gen_folders_and_weeks.py \
            --scan-all \
            --problems-root problems \
            --weeks-yaml config/weeks.yaml \
            -v

      # 5) 대시보드 빌드 (weeks.yaml 기준)
      - name: Build dashboards
        env:
          ALSS_CHECK_BRANCHES: "1"
          ALSS_OVERWRITE: "1"
          ALSS_DEBUG: "1"
          ALSS_TREND_FALLBACK_DURING: "0"
          ALSS_LOG_LIMIT: "0"
        run: |
          python scripts/build_dashboard.py

      # 5.5) 커밋 전 디프/상태 확인 (그대로 유지 OK)
      - name: Show diff before commit
        run: |
          echo "=== git status (short) ==="
          git status -s || true
          echo
          echo "=== changed files (name-only) ==="
          git --no-pager diff --name-only || true
          echo
          echo "=== README diffs (first 200 lines) ==="
          for f in $(git --no-pager diff --name-only | grep -E '/?README\.md$' || true); do
            echo "--- $f ---"
            git --no-pager diff -- "$f" | sed -n '1,200p' || true
            echo
          done
          echo "=== weeks.yaml diff (first 200 lines) ==="
          if git --no-pager diff --name-only | grep -q '^config/weeks\.yaml$'; then
            git --no-pager diff -- config/weeks.yaml | sed -n '1,200p' || true
          else
            echo "(no changes in config/weeks.yaml)"
          fi

      # 6) README/주차README + weeks.yaml + .gitkeep 커밋/푸시
      - name: Commit & Push changes
        run: |
          # 스테이징: 루트/주차 README, weeks.yaml, 모든 .gitkeep
          git add -- README.md ':(glob)**/README.md' config/weeks.yaml ':(glob)**/.gitkeep' || true
          git add -u -- README.md ':(glob)**/README.md' config/weeks.yaml ':(glob)**/.gitkeep' || true

          echo "=== staged files (name-only) ==="
          git --no-pager diff --cached --name-only || true

          if ! git diff --cached --quiet; then
            git config user.name  "skala-bot"
            git config user.email "skalabot16@gmail.com"
            git commit -m "🧰 build: sync weeks.yaml, create folders/.gitkeep, and refresh dashboards"
            git push origin HEAD:main
          else
            echo "No changes to commit."
          fi

      # 실패 시 추가 디버그
      - name: Debug on failure
        if: failure()
        run: |
          echo '--- show remotes ---'
          git remote -v
          echo '--- show refs snapshot ---'
          git for-each-ref --format='%(refname:short)' | sed -n '1,200p' || true
