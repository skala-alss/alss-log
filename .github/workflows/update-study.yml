name: Update Study Dashboards

on:
  schedule:
    - cron: "0 18 * * *" # 매일 03:00 KST (UTC+9)
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-study
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) PAT로 체크아웃 + 전체 히스토리 전제
      - name: Checkout with BOT PAT
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_PAT }}

      # 2) 리모트/브랜치/태그 전부 확보 (+ PR refs)
      - name: Fetch all branches & tags
        run: |
          git config --global advice.detachedHead false
          git remote set-url origin https://x-access-token:${{ secrets.BOT_PAT }}@github.com/${{ github.repository }}.git

          git fetch --prune --tags
          git fetch origin '+refs/heads/*:refs/remotes/origin/*' --prune
          git fetch origin '+refs/pull/*/head:refs/remotes/pull/*/head' --prune
          git fetch origin '+refs/pull/*/merge:refs/remotes/pull/*/merge' --prune

          echo '--- remote branches (head 100) ---'
          git for-each-ref --format='%(refname:short)' refs/remotes/ | sed -n '1,100p' || true
          echo '--- recent main log (head 30) ---'
          (git log origin/main --oneline --decorate -n 30 || git log main --oneline --decorate -n 30) || true

      # 3) Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests PyYAML

      # 4) 대시보드 빌드
      - name: Build dashboards
        env:
          ALSS_CHECK_BRANCHES: "1"
          ALSS_OVERWRITE: "1"
          ALSS_DEBUG: "1"
          ALSS_TREND_FALLBACK_DURING: "0"
          ALSS_LOG_LIMIT: "0"
        run: |
          python scripts/build_dashboard.py

      # 4.5) 커밋 전 디프/상태 확인 (디버그)
      - name: Show diff before commit
        run: |
          echo "=== git status (short) ==="
          git status -s || true
          echo
          echo "=== changed files (name-only) ==="
          git --no-pager diff --name-only || true
          echo
          echo "=== README diffs (first 200 lines) ==="
          for f in $(git --no-pager diff --name-only | grep -E '/?README\.md$' || true); do
            echo "--- $f ---"
            git --no-pager diff -- "$f" | sed -n '1,200p' || true
            echo
          done

      # 5) 변경 발생 시 자동 커밋/푸시 (README 범위로 한정)
      - name: Pre-stage README changes (safety)
        run: |
          # 신규 파일/변경 파일 스테이징
          git add -- README.md ':(glob)**/README.md' || true
          # 삭제/리네임 등 추적 파일 상태 업데이트
          git add -u -- README.md ':(glob)**/README.md' || true

          echo "=== staged files (name-only) ==="
          git --no-pager diff --cached --name-only || true

      - name: Commit & Push if changed (auto)
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "📝 docs: auto-update week tables & root dashboard"
          branch: main
          # 🔑 Git pathspec with glob magic
          file_pattern: |
            README.md
            :(glob)**/README.md
          add_options: -A
          commit_user_name: skala-bot
          commit_user_email: skalabot16@gmail.com
          commit_author: "skala-bot <skalabot16@gmail.com>"

      # 실패 시 추가 디버그
      - name: Debug on failure
        if: failure()
        run: |
          echo '--- show remotes ---'
          git remote -v
          echo '--- show refs snapshot ---'
          git for-each-ref --format='%(refname:short)' | sed -n '1,200p' || true
